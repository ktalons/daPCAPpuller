name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -e .[gui,datetime]

      - name: Build GUI binary
        shell: bash
        run: |
          pyinstaller --onefile --windowed --name PCAPpullerGUI gui_pcappuller.py
          mkdir -p release
          if [ "$RUNNER_OS" = "Windows" ]; then
            mv dist/PCAPpullerGUI.exe "release/PCAPpullerGUI-windows.exe"
          elif [ "$RUNNER_OS" = "macOS" ]; then
            mv dist/PCAPpullerGUI "release/PCAPpullerGUI-macos"
          else
            mv dist/PCAPpullerGUI "release/PCAPpullerGUI-linux"
          fi

      - name: Build DEB/RPM (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y ruby-full build-essential rpm
          sudo gem install --no-document fpm
          VERSION=$(grep -E '^version\s*=\s*"[0-9]+\.[0-9]+\.[0-9]+"' pyproject.toml | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+)"/\1/')
          STAGE=$(mktemp -d)
          mkdir -p "$STAGE/usr/local/bin"
          install -m 0755 release/PCAPpullerGUI-linux "$STAGE/usr/local/bin/pcappuller-gui"
          NAME=pcappuller-gui
          DESC="PCAPpuller GUI: fast PCAP window selector, merger, trimmer"
          URL="https://github.com/ktalons/daPCAPpuller"
          LICENSE=MIT
          MAINTAINER="Kyle Versluis"
          # deb
          fpm -s dir -t deb -n "$NAME" -v "$VERSION" \
            --license "$LICENSE" --url "$URL" --maintainer "$MAINTAINER" \
            --description "$DESC" \
            -C "$STAGE" --prefix / \
            -p "release/${NAME}_${VERSION}_amd64.deb"
          # rpm
          fpm -s dir -t rpm -n "$NAME" -v "$VERSION" \
            --license "$LICENSE" --url "$URL" --maintainer "$MAINTAINER" \
            --description "$DESC" \
            -C "$STAGE" --prefix / \
            -p "release/${NAME}-${VERSION}-1.x86_64.rpm"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gui-binaries-${{ matrix.os }}
          path: release/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: gui-binaries-*
          merge-multiple: true

      - name: Build Analyst Guide PDF
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-latex-recommended texlive-fonts-recommended
          pandoc docs/Analyst-Guide.md -o artifacts/Analyst-Guide.pdf || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ github.token }}
          files: artifacts/**

      - name: Check token scopes
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          curl -sI -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" https://api.github.com/user | tr -d '\r' | grep -i '^x-oauth-scopes\|^status'
